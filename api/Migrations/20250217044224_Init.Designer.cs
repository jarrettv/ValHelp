// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ValHelpApi.Config;

#nullable disable

namespace ValHelpApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250217044224_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ValHelpApi.Modules.Admin.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AltName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alt_name");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DiscordId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discord_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.PrimitiveCollection<string[]>("Roles")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("roles");

                    b.Property<string>("SteamId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("steam_id");

                    b.Property<string>("Twitch")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("twitch");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<string>("Youtube")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("youtube");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("DiscordId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_discord_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ValHelpApi.Modules.Tournament.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("desc");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_at");

                    b.Property<float>("Hours")
                        .HasColumnType("real")
                        .HasColumnName("hours");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mode");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Prizes")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("prizes");

                    b.Property<string>("ScoringCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("scoring_code");

                    b.Property<string>("Seed")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("seed");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.HasIndex("ScoringCode")
                        .HasDatabaseName("ix_events_scoring_code");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("ValHelpApi.Modules.Tournament.Hunt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("desc");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Prizes")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("prizes");

                    b.Property<string>("Scoring")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("scoring");

                    b.Property<string>("Seed")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("seed");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_hunts");

                    b.ToTable("hunts", (string)null);
                });

            modelBuilder.Entity("ValHelpApi.Modules.Tournament.HuntsPlayer", b =>
                {
                    b.Property<int>("HuntId")
                        .HasColumnType("integer")
                        .HasColumnName("hunt_id");

                    b.Property<string>("PlayerId")
                        .HasColumnType("text")
                        .HasColumnName("player_id");

                    b.Property<int>("Deaths")
                        .HasColumnType("integer")
                        .HasColumnName("deaths");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Relogs")
                        .HasColumnType("integer")
                        .HasColumnName("relogs");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Stream")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("stream");

                    b.PrimitiveCollection<string[]>("Trophies")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("trophies");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("HuntId", "PlayerId")
                        .HasName("pk_hunts_player");

                    b.ToTable("hunts_player", (string)null);
                });

            modelBuilder.Entity("ValHelpApi.Modules.Tournament.Player", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("integer")
                        .HasColumnName("event_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Stream")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("stream");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("EventId", "UserId")
                        .HasName("pk_players");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_players_user_id");

                    b.ToTable("players", (string)null);
                });

            modelBuilder.Entity("ValHelpApi.Modules.Tournament.Scoring", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.PrimitiveCollection<string[]>("Modes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("modes");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Scores")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("scores");

                    b.HasKey("Code")
                        .HasName("pk_scorings");

                    b.ToTable("scorings", (string)null);
                });

            modelBuilder.Entity("ValHelpApi.Modules.Tournament.TrackHunt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CurrentScore")
                        .HasColumnType("integer")
                        .HasColumnName("current_score");

                    b.Property<int>("Deaths")
                        .HasColumnType("integer")
                        .HasColumnName("deaths");

                    b.Property<string>("Gamemode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gamemode");

                    b.Property<int>("Logouts")
                        .HasColumnType("integer")
                        .HasColumnName("logouts");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("player_id");

                    b.Property<string>("PlayerLocation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("player_location");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("player_name");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session_id");

                    b.PrimitiveCollection<string[]>("Trophies")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("trophies");

                    b.HasKey("Id")
                        .HasName("pk_track_hunts");

                    b.ToTable("track_hunts", (string)null);
                });

            modelBuilder.Entity("ValHelpApi.Modules.Tournament.TrackLog", b =>
                {
                    b.Property<DateTime>("At")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("at");

                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mode");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<string>("Seed")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("seed");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user");

                    b.HasKey("At", "Id")
                        .HasName("pk_track_logs");

                    b.ToTable("track_logs", (string)null);
                });

            modelBuilder.Entity("ValHelpApi.Modules.Tournament.Event", b =>
                {
                    b.HasOne("ValHelpApi.Modules.Tournament.Scoring", "Scoring")
                        .WithMany()
                        .HasForeignKey("ScoringCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_scorings_scoring_code");

                    b.Navigation("Scoring");
                });

            modelBuilder.Entity("ValHelpApi.Modules.Tournament.HuntsPlayer", b =>
                {
                    b.HasOne("ValHelpApi.Modules.Tournament.Hunt", "Hunt")
                        .WithMany("Players")
                        .HasForeignKey("HuntId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_hunts_player_hunts_hunt_id");

                    b.Navigation("Hunt");
                });

            modelBuilder.Entity("ValHelpApi.Modules.Tournament.Player", b =>
                {
                    b.HasOne("ValHelpApi.Modules.Tournament.Event", "Event")
                        .WithMany("Players")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_players_events_event_id");

                    b.HasOne("ValHelpApi.Modules.Admin.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_players_users_user_id");

                    b.OwnsMany("ValHelpApi.Modules.Tournament.PlayerLog", "Logs", b1 =>
                        {
                            b1.Property<int>("PlayerEventId")
                                .HasColumnType("integer");

                            b1.Property<int>("PlayerUserId")
                                .HasColumnType("integer");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<DateTime>("At")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PlayerEventId", "PlayerUserId", "__synthesizedOrdinal");

                            b1.ToTable("players");

                            b1.ToJson("logs");

                            b1.WithOwner()
                                .HasForeignKey("PlayerEventId", "PlayerUserId")
                                .HasConstraintName("fk_players_players_player_event_id_player_user_id");
                        });

                    b.Navigation("Event");

                    b.Navigation("Logs");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ValHelpApi.Modules.Tournament.TrackLog", b =>
                {
                    b.OwnsMany("ValHelpApi.Modules.Tournament.TrackerLog", "Logs", b1 =>
                        {
                            b1.Property<DateTime>("TrackLogAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("TrackLogId")
                                .HasColumnType("text");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<DateTime>("At")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("TrackLogAt", "TrackLogId", "__synthesizedOrdinal");

                            b1.ToTable("track_logs");

                            b1.ToJson("logs");

                            b1.WithOwner()
                                .HasForeignKey("TrackLogAt", "TrackLogId")
                                .HasConstraintName("fk_track_logs_track_logs_track_log_at_track_log_id");
                        });

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("ValHelpApi.Modules.Tournament.Event", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("ValHelpApi.Modules.Tournament.Hunt", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
